//
// This file is part of arduino-cli.
//
// Copyright 2018 ARDUINO SA (http://www.arduino.cc/)
//
// This software is released under the GNU General Public License version 3,
// which covers the main part of arduino-cli.
// The terms of this license can be found at:
// https://www.gnu.org/licenses/gpl-3.0.en.html
//
// You can be released from the requirements of the above licenses by purchasing
// a commercial license. Buying such a license is mandatory if you want to modify or
// otherwise use the software for commercial activities involving the Arduino
// software without disclosing the source code of your own applications. To purchase
// a commercial license, send an email to license@arduino.cc.
//

syntax = "proto3";

package cc.arduino.cli.commands;

option go_package = "github.com/arduino/arduino-cli/rpc/commands";

import "commands/common.proto";
import "commands/board.proto";
import "commands/compile.proto";
import "commands/core.proto";
import "commands/upload.proto";
import "commands/lib.proto";

// The main Arduino Platform Service
service ArduinoCore {
  // BOOTSTRAP COMMANDS
  //-------------------

  // Start a new instance of the Arduino Core Service
  rpc Init(InitReq) returns (stream InitResp) {}

  // Destroy an instance of the Arduino Core Service
  rpc Destroy(DestroyReq) returns (DestroyResp) {}

  // Rescan instance of the Arduino Core Service
  rpc Rescan(RescanReq) returns (RescanResp) {}

  // Update package index of the Arduino Core Service
  rpc UpdateIndex(UpdateIndexReq) returns (stream UpdateIndexResp) {}

  // Update libraries index
  rpc UpdateLibrariesIndex(UpdateLibrariesIndexReq) returns (stream UpdateLibrariesIndexResp) {}

  rpc Version(VersionReq) returns (VersionResp) {}

  // BOARD COMMANDS
  // --------------

  // Requests details about a board
  rpc BoardDetails(BoardDetailsReq) returns (BoardDetailsResp);

  rpc BoardAttach(BoardAttachReq) returns (stream BoardAttachResp);

  rpc BoardList(BoardListReq) returns (BoardListResp);

  rpc BoardListAll(BoardListAllReq) returns (BoardListAllResp);

  rpc Compile(CompileReq) returns (stream CompileResp);

  rpc PlatformInstall(PlatformInstallReq) returns (stream PlatformInstallResp);

  rpc PlatformDownload(PlatformDownloadReq) returns (stream PlatformDownloadResp);

  rpc PlatformUninstall(PlatformUninstallReq) returns (stream PlatformUninstallResp);

  rpc PlatformUpgrade(PlatformUpgradeReq) returns (stream PlatformUpgradeResp);

  rpc Upload(UploadReq) returns (stream UploadResp);

  rpc PlatformSearch(PlatformSearchReq) returns (PlatformSearchResp);

  rpc PlatformList(PlatformListReq) returns (PlatformListResp);

  rpc LibraryDownload(LibraryDownloadReq) returns (stream LibraryDownloadResp);

  rpc LibraryInstall(LibraryInstallReq) returns (stream LibraryInstallResp);

  rpc LibraryUninstall(LibraryUninstallReq) returns (stream LibraryUninstallResp);

  rpc LibraryUpgradeAll(LibraryUpgradeAllReq) returns (stream LibraryUpgradeAllResp);

  rpc LibrarySearch(LibrarySearchReq) returns (LibrarySearchResp);

  rpc LibraryList(LibraryListReq) returns (LibraryListResp);
}

// Configuration contains information to instantiate an Arduino Platform Service
message Configuration {
  // dataDir represents the current root of the arduino tree (defaulted to
  // `$HOME/.arduino15` on linux).
  string dataDir = 1;

  // sketchbookDir represents the current root of the sketchbooks tree
  // (defaulted to `$HOME/Arduino`).
  string sketchbookDir = 2;

  // ArduinoIDEDirectory is the directory of the Arduino IDE if the CLI runs
  // together with it.
  string downloadsDir = 3;

  // BoardManagerAdditionalUrls contains the additional URL for 3rd party
  // packages
  repeated string boardManagerAdditionalUrls = 4;
}

message InitReq {
  Configuration configuration = 1;
  bool library_manager_only = 2;
}

message InitResp {
  Instance instance = 1;
  repeated string platforms_index_errors = 2;
  string libraries_index_error = 3;
  DownloadProgress download_progress = 4;
  TaskProgress task_progress = 5;
}

message DestroyReq { Instance instance = 1; }
message DestroyResp {}

message RescanReq {
  Instance instance = 1;
}

message RescanResp {
  repeated string platforms_index_errors = 1;
  string libraries_index_error = 2;
}

message UpdateIndexReq {
	Instance instance = 1;
}

message UpdateIndexResp {
  DownloadProgress download_progress = 1;
}

message UpdateLibrariesIndexReq {
	Instance instance = 1;
}

message UpdateLibrariesIndexResp {
  DownloadProgress download_progress = 1;
}

message VersionReq {}

message VersionResp {
  string version = 1;
}
