version: '2'

tasks:
  protoc:
    desc: Compile protobuf definitions
    cmds:
      - '{{ default "protoc" .PROTOC_BINARY }} --proto_path=rpc --go_out=plugins=grpc,paths=source_relative:rpc ./rpc/commands/*.proto'
      - '{{ default "protoc" .PROTOC_BINARY }} --proto_path=rpc --go_out=plugins=grpc,paths=source_relative:rpc ./rpc/monitor/*.proto'

  build:
    desc: Build the project
    cmds:
      - go build -v -i {{.LDFLAGS}}

  test:
    desc: Run the full testsuite, `legacy` will be skipped
    cmds:
      - task: test-unit
      - task: test-integration

  test-unit:
    desc: Run unit tests only
    cmds:
      - go test -short {{ default "-v" .GOFLAGS }} -coverprofile=coverage_unit.txt {{ default .DEFAULT_TARGETS .TARGETS }} {{.TEST_LDFLAGS}}

  test-integration:
    desc: Run integration tests only
    cmds:
      - go test -run Integration {{ default "-v" .GOFLAGS }} -coverprofile=coverage_integ.txt {{ default .DEFAULT_TARGETS .TARGETS }} {{.TEST_LDFLAGS}}
      - pytest test

  test-legacy:
    desc: Run tests for the `legacy` package
    cmds:
      - go test {{ default "-v -failfast" .GOFLAGS }} -coverprofile=coverage_legacy.txt ./legacy/...

  test-unit-race:
    desc: Run unit tests only with race condition detection
    cmds:
      - go test -short -race {{ default "-v" .GOFLAGS }} -coverprofile=coverage_race_unit.txt {{ default .DEFAULT_TARGETS .TARGETS }}

  check:
    desc: Check fmt and lint, `legacy` will be skipped
    cmds:
      - test -z $(go fmt {{ default .DEFAULT_TARGETS .TARGETS }})
      - go vet {{ default .DEFAULT_TARGETS .TARGETS }}
      - "'{{.GOLINTBIN}}' {{.GOLINTFLAGS}} {{ default .DEFAULT_TARGETS .TARGETS }}"

  check-legacy:
    desc: Check fmt and lint for the `legacy` package
    cmds:
      - test -z $(go fmt ./legacy/...)
      - go vet ./legacy/...

  rpc-client:
    desc: Run the rpc client test routine (server must be already started)
    cmds:
      - go test -run TestWithClientE2E ./commands/daemon

vars:
  # all modules of this project except for "legacy/..." module
  DEFAULT_TARGETS:
    sh: echo `go list ./... | grep -v legacy | tr '\n' ' '`

  # build vars
  COMMIT:
    sh: echo ${TRAVIS_COMMIT:-`git log -n 1 --format=%h`}
  LDFLAGS: >
      -ldflags '-X github.com/arduino/arduino-cli/version.commit={{.COMMIT}}'

  # test vars
  GOFLAGS: "-timeout 10m -v -coverpkg=./... -covermode=atomic"
  TEST_VERSIONSTRING: "0.0.0-test.preview"
  TEST_COMMIT: "deadbeef"
  TEST_LDFLAGS: >
    -ldflags  '-X github.com/arduino/arduino-cli/version.versionString={{.TEST_VERSIONSTRING}}
    -X github.com/arduino/arduino-cli/version.commit={{.TEST_COMMIT}}'

  # check-lint vars
  GOLINTBIN:
    sh: go list -f {{"{{"}}".Target{{"}}"}}" golang.org/x/lint/golint
  GOLINTFLAGS: "-min_confidence 0.8 -set_exit_status"
